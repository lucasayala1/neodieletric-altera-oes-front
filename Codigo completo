Model

package model;

public class ImpactoIA {
    private String nomeModelo;        
    private double consumoEnergia;     
    private boolean usaEnergiaRenovavel; 
    private String aplicacao;         
    private double eficiencia;         

    public ImpactoIA(String nomeModelo, double consumoEnergia, boolean usaEnergiaRenovavel, String aplicacao) {
        this.nomeModelo = nomeModelo;
        this.consumoEnergia = consumoEnergia;
        this.usaEnergiaRenovavel = usaEnergiaRenovavel;
        this.aplicacao = aplicacao;
        this.eficiencia = 0; 
    }

    public ImpactoIA(String nomeModelo, double consumoEnergia, boolean usaEnergiaRenovavel, String aplicacao, double eficiencia) {
        this.nomeModelo = nomeModelo;
        this.consumoEnergia = consumoEnergia;
        this.usaEnergiaRenovavel = usaEnergiaRenovavel;
        this.aplicacao = aplicacao;
        this.eficiencia = eficiencia; 
    }

 
    public String getNomeModelo() {
        return nomeModelo;
    }

    public void setNomeModelo(String nomeModelo) {
        this.nomeModelo = nomeModelo;
    }

    public double getConsumoEnergia() {
        return consumoEnergia;
    }

    public void setConsumoEnergia(double consumoEnergia) {
        this.consumoEnergia = consumoEnergia;
    }

    public boolean isUsaEnergiaRenovavel() {
        return usaEnergiaRenovavel;
    }

    public void setUsaEnergiaRenovavel(boolean usaEnergiaRenovavel) {
        this.usaEnergiaRenovavel = usaEnergiaRenovavel;
    }

    public String getAplicacao() {
        return aplicacao;
    }

    public void setAplicacao(String aplicacao) {
        this.aplicacao = aplicacao;
    }

    public double getEficiencia() {
        return eficiencia;
    }

  
    public double getEmissaoBase() {
        double fator = usaEnergiaRenovavel ? 0.05 : 0.233; 
        return consumoEnergia * fator;
    }

   
    public double getEmissaoOtimizada() {
        return getEmissaoBase() * (1 - eficiencia / 100);
    }

 
    public void aplicarOtimizacao(double percentual) {
        if (percentual >= 0 && percentual <= 100) {
            this.eficiencia = percentual;
        }
    }

    @Override
    public String toString() {
        return "ImpactoIA{" +
                "nomeModelo='" + nomeModelo + '\'' +
                ", consumoEnergia=" + consumoEnergia +
                ", usaEnergiaRenovavel=" + usaEnergiaRenovavel +
                ", aplicacao='" + aplicacao + '\'' +
                ", eficiencia=" + eficiencia +
                '}';
    }
}


View 

package view;

import model.ImpactoIA;         
import java.util.InputMismatchException;
import java.util.Scanner;

public class ImpactoIAView {
    private Scanner scanner;

    public ImpactoIAView() {
        scanner = new Scanner(System.in);
    }

    public void mostrarInicio() {
        System.out.println("=== Sistema de Cálculo de Impacto de IA ===");
    }

    public String lerNomeModelo() {
        System.out.print("Digite o nome do modelo: ");
        try {
            return scanner.nextLine();
        } catch (Exception e) {
            System.out.println("Erro ao ler o nome do modelo.");
            return "";
        }
    }

    public String lerAplicacao() {
        System.out.print("Digite a aplicação do modelo: ");
        try {
            return scanner.nextLine();
        } catch (Exception e) {
            System.out.println("Erro ao ler a aplicação.");
            return "";
        }
    }

    public double lerConsumoEnergia() {
        System.out.print("Digite o consumo de energia (kWh): ");
        try {
            return scanner.nextDouble();
        } catch (InputMismatchException e) {
            System.out.println("Valor inválido! Digite um número.");
            scanner.nextLine(); 
            return 0;
        }
    }

    public boolean lerEnergiaRenovavel() {
        System.out.print("O modelo usa energia renovável? (true/false): ");
        try {
            return scanner.nextBoolean();
        } catch (InputMismatchException e) {
            System.out.println("Entrada inválida! Digite true ou false.");
            scanner.nextLine(); 
            return false;
        }
    }

    public int mostrarMenu() {
        System.out.println("\n=== Menu ===");
        System.out.println("1. Ver dados do impacto");
        System.out.println("2. Aplicar otimização");
        System.out.println("3. Sair");
        System.out.print("Escolha uma opção: ");
        try {
            int opcao = scanner.nextInt();
            scanner.nextLine(); 
            return opcao;
        } catch (InputMismatchException e) {
            System.out.println("Opção inválida! Digite um número inteiro.");
            scanner.nextLine();
            return -1;
        }
    }

    public void mostrarImpacto(ImpactoIA impactoIA) {
        try {
            System.out.println("\n--- Dados do Impacto ---");
            System.out.println("Modelo: " + impactoIA.getNomeModelo());
            System.out.println("Aplicação: " + impactoIA.getAplicacao());
            System.out.println("Consumo de Energia: " + impactoIA.getConsumoEnergia() + " kWh");
            System.out.println("Usa energia renovável: " + (impactoIA.isUsaEnergiaRenovavel() ? "Sim" : "Não"));
            System.out.println("Emissão base: " + impactoIA.getEmissaoBase() + " tCO2");
            System.out.println("Eficiência aplicada: " + impactoIA.getEficiencia() + "%");
            System.out.println("Emissão otimizada: " + impactoIA.getEmissaoOtimizada() + " tCO2");
        } catch (Exception e) {
            System.out.println("Erro ao mostrar os dados do impacto.");
        }
    }

    public double lerPercentualOtimizacao() {
        System.out.print("Digite o percentual de otimização (0 a 100): ");
        try {
            return scanner.nextDouble();
        } catch (InputMismatchException e) {
            System.out.println("Valor inválido! Digite um número entre 0 e 100.");
            scanner.nextLine(); 
            return 0;
        }
    }

    public void mostrarMensagem(String mensagem) {
        try {
            System.out.println(mensagem);
        } catch (Exception e) {
            System.out.println("Erro ao exibir a mensagem.");
        }
    }
}


Front end

package view;

import controller.Controller;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import model.ImpactoIA;

public class ImpactoIAFrontEnd extends Application {
    
    private TextField nomeField;
    private TextField energiaField;
    private CheckBox renovavelCheckBox;
    private TextField aplicacaoField;
    private TextField eficienciaField;
    private TextArea resultadoArea;
    private Controller controller;
    
    @Override
    public void start(Stage primaryStage) {
        controller = new Controller();
        
        primaryStage.setTitle("Calculadora de Impacto de IA");
        

        VBox mainLayout = new VBox(15);
        mainLayout.setPadding(new Insets(20));
        mainLayout.setAlignment(Pos.CENTER);
        
        
        Label titulo = new Label("Sistema de Cálculo de Impacto de IA");
        titulo.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");
        
     
        GridPane formulario = criarFormulario();
        
      
        HBox botoes = criarBotoes();
        
       
        resultadoArea = new TextArea();
        resultadoArea.setEditable(false);
        resultadoArea.setPrefRowCount(10);
        resultadoArea.setStyle("-fx-font-family: monospace;");
        
        
        mainLayout.getChildren().addAll(titulo, formulario, botoes, resultadoArea);
        
        Scene scene = new Scene(mainLayout, 600, 500);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    
    private GridPane criarFormulario() {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setAlignment(Pos.CENTER);
        
        
        grid.add(new Label("Nome do Modelo:"), 0, 0);
        nomeField = new TextField();
        grid.add(nomeField, 1, 0);
        
        grid.add(new Label("Consumo de Energia (kWh):"), 0, 1);
        energiaField = new TextField();
        grid.add(energiaField, 1, 1);
        
        grid.add(new Label("Usa Energia Renovável:"), 0, 2);
        renovavelCheckBox = new CheckBox();
        grid.add(renovavelCheckBox, 1, 2);
        
        grid.add(new Label("Aplicação:"), 0, 3);
        aplicacaoField = new TextField();
        grid.add(aplicacaoField, 1, 3);
        
        grid.add(new Label("Eficiência (%):"), 0, 4);
        eficienciaField = new TextField();
        grid.add(eficienciaField, 1, 4);
        
        return grid;
    }
    
    private HBox criarBotoes() {
        HBox botoes = new HBox(10);
        botoes.setAlignment(Pos.CENTER);
        
        Button calcularBtn = new Button("Calcular Impacto");
        calcularBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-weight: bold;");
        calcularBtn.setOnAction(e -> calcularImpacto());
        
        Button limparBtn = new Button("Limpar");
        limparBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white; -fx-font-weight: bold;");
        limparBtn.setOnAction(e -> limparCampos());
        
        botoes.getChildren().addAll(calcularBtn, limparBtn);
        return botoes;
    }
    
    private void calcularImpacto() {
        try {
            String nome = nomeField.getText();
            double energia = Double.parseDouble(energiaField.getText());
            boolean renovavel = renovavelCheckBox.isSelected();
            String aplicacao = aplicacaoField.getText();
            double eficiencia = Double.parseDouble(eficienciaField.getText());
            
           
            ImpactoIA impacto = new ImpactoIA(nome, energia, renovavel, aplicacao);
            impacto.aplicarOtimizacao(eficiencia);
            
      
            controller.setImpacto(impacto);
            
            
            String resultado = controller.gerarRelatorio();
            resultadoArea.setText(resultado);
            
        } catch (NumberFormatException ex) {
            resultadoArea.setText("Erro: Por favor, insira valores numéricos válidos para energia e eficiência.");
        } catch (Exception ex) {
            resultadoArea.setText("Erro: " + ex.getMessage());
        }
    }
    
    private void limparCampos() {
        nomeField.clear();
        energiaField.clear();
        renovavelCheckBox.setSelected(false);
        aplicacaoField.clear();
        eficienciaField.clear();
        resultadoArea.clear();
    }
    
    public static void main(String[] args) {
        launch(args);
    }
}

Controller

package controller;

import model.ImpactoIA;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Controller {
    private ImpactoIA impactoIA;
    private Scanner scanner; 

    public Controller() {
        scanner = new Scanner(System.in);
    }

    public void cadastrarImpacto() {
        // Entrada do nome do modelo
        String nomeModelo;
        while (true) {
            System.out.print("Digite o nome do modelo: ");
            nomeModelo = scanner.nextLine().trim();
            if (!nomeModelo.isEmpty()) {
                break;
            } else {
                System.out.println("Erro: Nome do modelo não pode estar vazio. Tente novamente.");
            }
        }

        // Entrada do consumo de energia
        double consumoEnergia;
        while (true) {
            try {
                System.out.print("Digite o consumo de energia (kWh): ");
                consumoEnergia = scanner.nextDouble();
                if (consumoEnergia >= 0) {
                    break;
                } else {
                    System.out.println("Erro: O consumo deve ser um valor positivo. Tente novamente.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Erro: Digite um número válido para o consumo. Tente novamente.");
                scanner.nextLine(); // limpa entrada inválida
            }
        }

        // Entrada de energia renovável
        boolean usaEnergiaRenovavel;
        while (true) {
            try {
                System.out.print("Usa energia renovável? (true/false): ");
                usaEnergiaRenovavel = scanner.nextBoolean();
                break;
            } catch (InputMismatchException e) {
                System.out.println("Erro: Digite 'true' ou 'false' para energia renovável. Tente novamente.");
                scanner.nextLine(); // limpa entrada inválida
            }
        }

        scanner.nextLine(); // limpa buffer

        // Entrada da aplicação
        String aplicacao;
        while (true) {
            System.out.print("Digite a aplicação: ");
            aplicacao = scanner.nextLine().trim();
            if (!aplicacao.isEmpty()) {
                break;
            } else {
                System.out.println("Erro: Aplicação não pode estar vazia. Tente novamente.");
            }
        }

        // Entrada da eficiência
        double eficiencia;
        while (true) {
            try {
                System.out.print("Digite a eficiência (%): ");
                eficiencia = scanner.nextDouble();
                if (eficiencia >= 0 && eficiencia <= 100) {
                    break;
                } else {
                    System.out.println("Erro: A eficiência deve estar entre 0 e 100%. Tente novamente.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Erro: Digite um número válido para a eficiência. Tente novamente.");
                scanner.nextLine(); // limpa entrada inválida
            }
        }

        // Criar objeto com dados validados
        impactoIA = new ImpactoIA(nomeModelo, consumoEnergia, usaEnergiaRenovavel, aplicacao);
        impactoIA.aplicarOtimizacao(eficiencia);

        System.out.println("\nImpacto cadastrado com sucesso!");
    }

    public void exibirImpacto() {
        if (impactoIA != null) {
            System.out.println("=== CÁLCULO DE IMPACTO DE IA ===");
            System.out.println();
            System.out.println("DADOS DO MODELO");
            System.out.println("   Nome: " + impactoIA.getNomeModelo());
            System.out.println("   Aplicação: " + impactoIA.getAplicacao());
            System.out.println("   Consumo de Energia: " + String.format("%.2f", impactoIA.getConsumoEnergia()) + " kWh");
            System.out.println("   Energia Renovável: " + (impactoIA.isUsaEnergiaRenovavel() ? "Sim" : "Não"));
            System.out.println("   Eficiência Aplicada: " + String.format("%.1f", impactoIA.getEficiencia()) + "%");
            System.out.println();
            System.out.println("IMPACTO AMBIENTAL");
            System.out.println("   Emissão Base: " + String.format("%.4f", impactoIA.getEmissaoBase()) + " tCO2");
            System.out.println("   Emissão Otimizada: " + String.format("%.4f", impactoIA.getEmissaoOtimizada()) + " tCO2");
            System.out.println("   Redução de Emissões: " + String.format("%.2f", impactoIA.getEficiencia()) + "%");
            System.out.println();
            System.out.println("ANÁLISE");
            
            // Análise do impacto (exatamente igual ao frontend)
            String analiseImpacto;
            if (impactoIA.getEmissaoOtimizada() < impactoIA.getEmissaoBase() * 0.5) {
                analiseImpacto = "Excelente otimização! Redução significativa de emissões.";
            } else if (impactoIA.getEmissaoOtimizada() < impactoIA.getEmissaoBase() * 0.8) {
                analiseImpacto = "Boa otimização. Há potencial para melhorias.";
            } else {
                analiseImpacto = "Otimização limitada. Considere melhorar a eficiência.";
            }
            System.out.println("   " + analiseImpacto);
            
            String tipoEnergia = impactoIA.isUsaEnergiaRenovavel() ? 
                "Energia limpa - baixo impacto" : "Energia convencional - alto impacto";
            System.out.println("   Tipo de Energia: " + tipoEnergia);
                
            String statusOtimizacao;
            if (impactoIA.getEficiencia() > 80) {
                statusOtimizacao = "Altamente otimizado";
            } else if (impactoIA.getEficiencia() > 50) {
                statusOtimizacao = "Moderadamente otimizado";
            } else {
                statusOtimizacao = "Precisa de mais otimização";
            }
            System.out.println("   Status da Otimização: " + statusOtimizacao);
            
        } else {
            System.out.println("Nenhum impacto cadastrado ainda.");
        }
    }
    
    // Método para obter o impacto (usado pelo frontend)
    public ImpactoIA getImpacto() {
        return this.impactoIA;
    }
    
    // Método para configurar o impacto (usado pelo frontend JavaFX)
    public void setImpacto(ImpactoIA impacto) {
        this.impactoIA = impacto;
    }
    
    // Método para gerar relatório formatado (usado pelo frontend JavaFX)
    public String gerarRelatorio() {
        if (impactoIA == null) {
            return "Nenhum impacto calculado ainda.";
        }
        
        double emissaoBase = impactoIA.getEmissaoBase();
        double emissaoOtimizada = impactoIA.getEmissaoOtimizada(); 
        double reducao = impactoIA.getEficiencia();
        
        StringBuilder relatorio = new StringBuilder();
        relatorio.append("=== CÁLCULO DE IMPACTO DE IA ===\n\n");
        
        relatorio.append("DADOS DO MODELO\n");
        relatorio.append(String.format("   Nome: %s\n", impactoIA.getNomeModelo()));
        relatorio.append(String.format("   Aplicação: %s\n", impactoIA.getAplicacao()));
        relatorio.append(String.format("   Consumo de Energia: %.2f kWh\n", impactoIA.getConsumoEnergia()));
        relatorio.append(String.format("   Energia Renovável: %s\n", impactoIA.isUsaEnergiaRenovavel() ? "Sim" : "Não"));
        relatorio.append(String.format("   Eficiência Aplicada: %.1f%%\n\n", impactoIA.getEficiencia()));
        
        relatorio.append("IMPACTO AMBIENTAL\n");
        relatorio.append(String.format("   Emissão Base: %.4f tCO2\n", emissaoBase));
        relatorio.append(String.format("   Emissão Otimizada: %.4f tCO2\n", emissaoOtimizada));
        relatorio.append(String.format("   Redução de Emissões: %.2f%%\n\n", reducao));
        
        relatorio.append("ANÁLISE\n");
        
        // Análise do impacto
        String analiseImpacto;
        if (emissaoOtimizada < emissaoBase * 0.5) {
            analiseImpacto = "Excelente otimização! Redução significativa de emissões.";
        } else if (emissaoOtimizada < emissaoBase * 0.8) {
            analiseImpacto = "Boa otimização. Há potencial para melhorias.";
        } else {
            analiseImpacto = "Otimização limitada. Considere melhorar a eficiência.";
        }
        relatorio.append(String.format("   %s\n", analiseImpacto));
        
        String tipoEnergia = impactoIA.isUsaEnergiaRenovavel() ? 
            "Energia limpa - baixo impacto" : "Energia convencional - alto impacto";
        relatorio.append(String.format("   Tipo de Energia: %s\n", tipoEnergia));
            
        String statusOtimizacao;
        if (impactoIA.getEficiencia() > 80) {
            statusOtimizacao = "Altamente otimizado";
        } else if (impactoIA.getEficiencia() > 50) {
            statusOtimizacao = "Moderadamente otimizado";
        } else {
            statusOtimizacao = "Precisa de mais otimização";
        }
        relatorio.append(String.format("   Status da Otimização: %s\n", statusOtimizacao));
        
        return relatorio.toString();
    }
}



